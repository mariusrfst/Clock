{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Welloxy\\\\CascadeProjects\\\\windsurf-project\\\\src\\\\components\\\\Clock\\\\Clock.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Clock.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Clock = ({\n  textColor,\n  fontFamily,\n  textSize,\n  isKlockMode,\n  position,\n  setPosition,\n  isDraggable,\n  isFocusModeActive,\n  focusElapsedTimeInSeconds\n}) => {\n  _s();\n  const [time, setTime] = useState(new Date());\n  const [isDragging, setIsDragging] = useState(false);\n  const dragStartRef = useRef(null);\n  const clockRef = useRef(null);\n\n  // Timer for updating clock time display\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  // This useEffect for secondsProgress will be removed as progress bar moves to App.tsx\n  // const [secondsProgress, setSecondsProgress] = useState(0);\n  // useEffect(() => {\n  //   if (isKlockMode) {\n  //     const progressTimerId = setInterval(() => {\n  //       const currentSeconds = new Date().getSeconds();\n  //       setSecondsProgress((currentSeconds / 60) * 100);\n  //     }, 200); // Update progress more frequently for smoothness\n  //     return () => clearInterval(progressTimerId);\n  //   } else {\n  //     setSecondsProgress(0);\n  //   }\n  // }, [isKlockMode]);\n\n  const formatTime = date => {\n    const pad = n => n < 10 ? '0' + n : n;\n    if (isFocusModeActive) {\n      const totalSeconds = focusElapsedTimeInSeconds;\n      const focusHours = Math.floor(totalSeconds / 3600);\n      const focusMinutes = Math.floor(totalSeconds % 3600 / 60);\n      if (isKlockMode) {\n        // Focus mode with Klock Mode enabled: HH:MM\n        return `${pad(focusHours)}:${pad(focusMinutes)}`;\n      } else {\n        // Focus mode with Klock Mode disabled: HH:MM:SS\n        const focusSeconds = totalSeconds % 60;\n        return `${pad(focusHours)}:${pad(focusMinutes)}:${pad(focusSeconds)}`;\n      }\n    }\n\n    // Regular time display\n    let hours = date.getHours();\n    const minutes = date.getMinutes();\n    const seconds = date.getSeconds();\n    // const ampm = hours >= 12 ? 'PM' : 'AM';\n    // hours = hours % 12;\n    // hours = hours ? hours : 12; // the hour '0' should be '12'\n\n    if (isKlockMode) {\n      return `${pad(hours)}:${pad(minutes)}`; // Klock mode for current time still hides seconds\n    }\n    return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;\n  };\n  const handleMouseDown = e => {\n    if (!isDraggable || !clockRef.current) return;\n    setIsDragging(true);\n\n    // Parse current percentage positions. Remove '%' and convert to number.\n    const currentTopPercent = parseFloat(position.top);\n    const currentLeftPercent = parseFloat(position.left);\n    dragStartRef.current = {\n      mouseX: e.clientX,\n      mouseY: e.clientY,\n      initialClockTopPercent: currentTopPercent,\n      initialClockLeftPercent: currentLeftPercent\n    };\n    e.preventDefault(); // Prevent text selection\n  };\n  useEffect(() => {\n    const handleMouseMove = e => {\n      if (!isDragging || !dragStartRef.current || !clockRef.current) return;\n      const parentElement = clockRef.current.parentElement;\n      if (!parentElement) return;\n      const parentWidth = parentElement.clientWidth;\n      const parentHeight = parentElement.clientHeight;\n\n      // Calculate mouse movement in pixels\n      const dxPx = e.clientX - dragStartRef.current.mouseX;\n      const dyPx = e.clientY - dragStartRef.current.mouseY;\n\n      // Convert pixel movement to percentage movement\n      const dLeftPercent = dxPx / parentWidth * 100;\n      const dTopPercent = dyPx / parentHeight * 100;\n\n      // Calculate new percentage positions\n      let newLeftPercent = dragStartRef.current.initialClockLeftPercent + dLeftPercent;\n      let newTopPercent = dragStartRef.current.initialClockTopPercent + dTopPercent;\n\n      // Optional: Boundary checks (ensure clock center stays within viewport, can be refined)\n      // const clockWidthPercent = (clockRef.current.offsetWidth / parentWidth) * 100;\n      // const clockHeightPercent = (clockRef.current.offsetHeight / parentHeight) * 100;\n      // newLeftPercent = Math.max(clockWidthPercent / 2, Math.min(newLeftPercent, 100 - clockWidthPercent / 2));\n      // newTopPercent = Math.max(clockHeightPercent / 2, Math.min(newTopPercent, 100 - clockHeightPercent / 2));\n\n      setPosition({\n        left: `${newLeftPercent}%`,\n        top: `${newTopPercent}%`\n      });\n    };\n    const handleMouseUp = () => {\n      setIsDragging(false);\n      dragStartRef.current = null;\n    };\n    if (isDragging) {\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    }\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isDragging, setPosition]);\n  let cursorStyle = 'default';\n  if (isDraggable) {\n    cursorStyle = isDragging ? 'grabbing' : 'grab';\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: clockRef,\n    className: \"clock-container\",\n    style: {\n      top: position.top,\n      left: position.left,\n      transform: 'translate(-50%, -50%)',\n      // Center the clock on its top/left point\n      cursor: cursorStyle\n    },\n    onMouseDown: handleMouseDown,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clock-display\",\n      style: {\n        color: textColor,\n        fontFamily: fontFamily,\n        fontSize: textSize\n      },\n      children: formatTime(time)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_s(Clock, \"EOxM7ruG+Y94D6yAYZVb6QmM/Jg=\");\n_c = Clock;\nexport default Clock;\nvar _c;\n$RefreshReg$(_c, \"Clock\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Clock","textColor","fontFamily","textSize","isKlockMode","position","setPosition","isDraggable","isFocusModeActive","focusElapsedTimeInSeconds","_s","time","setTime","Date","isDragging","setIsDragging","dragStartRef","clockRef","timerId","setInterval","clearInterval","formatTime","date","pad","n","totalSeconds","focusHours","Math","floor","focusMinutes","focusSeconds","hours","getHours","minutes","getMinutes","seconds","getSeconds","handleMouseDown","e","current","currentTopPercent","parseFloat","top","currentLeftPercent","left","mouseX","clientX","mouseY","clientY","initialClockTopPercent","initialClockLeftPercent","preventDefault","handleMouseMove","parentElement","parentWidth","clientWidth","parentHeight","clientHeight","dxPx","dyPx","dLeftPercent","dTopPercent","newLeftPercent","newTopPercent","handleMouseUp","window","addEventListener","removeEventListener","cursorStyle","ref","className","style","transform","cursor","onMouseDown","children","color","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Welloxy/CascadeProjects/windsurf-project/src/components/Clock/Clock.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Clock.css';\n\ninterface ClockProps {\n  textColor?: string;\n  fontFamily?: string;\n  textSize?: string;\n  isKlockMode?: boolean;\n  position: { top: string; left: string };\n  setPosition: (position: { top: string; left: string }) => void;\n  isDraggable?: boolean;\n  isFocusModeActive: boolean;\n  focusElapsedTimeInSeconds: number;\n}\n\nconst Clock: React.FC<ClockProps> = ({ \n  textColor, \n  fontFamily, \n  textSize,\n  isKlockMode,\n  position,\n  setPosition,\n  isDraggable,\n  isFocusModeActive,\n  focusElapsedTimeInSeconds,\n}) => {\n  const [time, setTime] = useState(new Date());\n  const [isDragging, setIsDragging] = useState(false);\n  const dragStartRef = useRef<{ mouseX: number; mouseY: number; initialClockTopPercent: number; initialClockLeftPercent: number } | null>(null);\n  const clockRef = useRef<HTMLDivElement>(null);\n\n  // Timer for updating clock time display\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  // This useEffect for secondsProgress will be removed as progress bar moves to App.tsx\n  // const [secondsProgress, setSecondsProgress] = useState(0);\n  // useEffect(() => {\n  //   if (isKlockMode) {\n  //     const progressTimerId = setInterval(() => {\n  //       const currentSeconds = new Date().getSeconds();\n  //       setSecondsProgress((currentSeconds / 60) * 100);\n  //     }, 200); // Update progress more frequently for smoothness\n  //     return () => clearInterval(progressTimerId);\n  //   } else {\n  //     setSecondsProgress(0);\n  //   }\n  // }, [isKlockMode]);\n\n  const formatTime = (date: Date) => {\n    const pad = (n: number) => (n < 10 ? '0' + n : n);\n\n    if (isFocusModeActive) {\n      const totalSeconds = focusElapsedTimeInSeconds;\n      const focusHours = Math.floor(totalSeconds / 3600);\n      const focusMinutes = Math.floor((totalSeconds % 3600) / 60);\n      if (isKlockMode) { // Focus mode with Klock Mode enabled: HH:MM\n        return `${pad(focusHours)}:${pad(focusMinutes)}`;\n      } else { // Focus mode with Klock Mode disabled: HH:MM:SS\n        const focusSeconds = totalSeconds % 60;\n        return `${pad(focusHours)}:${pad(focusMinutes)}:${pad(focusSeconds)}`;\n      }\n    }\n\n    // Regular time display\n    let hours = date.getHours();\n    const minutes = date.getMinutes();\n    const seconds = date.getSeconds();\n    // const ampm = hours >= 12 ? 'PM' : 'AM';\n    // hours = hours % 12;\n    // hours = hours ? hours : 12; // the hour '0' should be '12'\n\n    if (isKlockMode) {\n      return `${pad(hours)}:${pad(minutes)}`; // Klock mode for current time still hides seconds\n    }\n    return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!isDraggable || !clockRef.current) return;\n    setIsDragging(true);\n\n    // Parse current percentage positions. Remove '%' and convert to number.\n    const currentTopPercent = parseFloat(position.top);\n    const currentLeftPercent = parseFloat(position.left);\n\n    dragStartRef.current = {\n      mouseX: e.clientX,\n      mouseY: e.clientY,\n      initialClockTopPercent: currentTopPercent,\n      initialClockLeftPercent: currentLeftPercent,\n    };\n    e.preventDefault(); // Prevent text selection\n  };\n\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!isDragging || !dragStartRef.current || !clockRef.current) return;\n\n      const parentElement = clockRef.current.parentElement;\n      if (!parentElement) return;\n\n      const parentWidth = parentElement.clientWidth;\n      const parentHeight = parentElement.clientHeight;\n\n      // Calculate mouse movement in pixels\n      const dxPx = e.clientX - dragStartRef.current.mouseX;\n      const dyPx = e.clientY - dragStartRef.current.mouseY;\n\n      // Convert pixel movement to percentage movement\n      const dLeftPercent = (dxPx / parentWidth) * 100;\n      const dTopPercent = (dyPx / parentHeight) * 100;\n\n      // Calculate new percentage positions\n      let newLeftPercent = dragStartRef.current.initialClockLeftPercent + dLeftPercent;\n      let newTopPercent = dragStartRef.current.initialClockTopPercent + dTopPercent;\n      \n      // Optional: Boundary checks (ensure clock center stays within viewport, can be refined)\n      // const clockWidthPercent = (clockRef.current.offsetWidth / parentWidth) * 100;\n      // const clockHeightPercent = (clockRef.current.offsetHeight / parentHeight) * 100;\n      // newLeftPercent = Math.max(clockWidthPercent / 2, Math.min(newLeftPercent, 100 - clockWidthPercent / 2));\n      // newTopPercent = Math.max(clockHeightPercent / 2, Math.min(newTopPercent, 100 - clockHeightPercent / 2));\n\n      setPosition({\n        left: `${newLeftPercent}%`,\n        top: `${newTopPercent}%`,\n      });\n    };\n\n    const handleMouseUp = () => {\n      setIsDragging(false);\n      dragStartRef.current = null;\n    };\n\n    if (isDragging) {\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isDragging, setPosition]);\n\n  let cursorStyle = 'default';\n  if (isDraggable) {\n    cursorStyle = isDragging ? 'grabbing' : 'grab';\n  }\n\n  return (\n    <div \n      ref={clockRef}\n      className=\"clock-container\"\n      style={{\n        top: position.top,\n        left: position.left,\n        transform: 'translate(-50%, -50%)', // Center the clock on its top/left point\n        cursor: cursorStyle,\n      }}\n      onMouseDown={handleMouseDown}\n    >\n      <div className=\"clock-display\" style={{ color: textColor, fontFamily: fontFamily, fontSize: textSize }}>\n        {formatTime(time)}\n      </div>\n      {/* Progress bar has been moved to App.tsx */}\n    </div>\n  );\n};\n\nexport default Clock;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}