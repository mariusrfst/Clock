{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Welloxy\\\\CascadeProjects\\\\windsurf-project\\\\src\\\\components\\\\Clock\\\\Clock.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Clock.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Clock = ({\n  textColor,\n  fontFamily,\n  textSize,\n  isKlockMode,\n  position,\n  setPosition,\n  isDraggable\n}) => {\n  _s();\n  const [time, setTime] = useState(new Date());\n  const [isDragging, setIsDragging] = useState(false);\n  const dragStartRef = useRef(null);\n  const clockRef = useRef(null);\n\n  // Timer for updating clock time display\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  // This useEffect for secondsProgress will be removed as progress bar moves to App.tsx\n  // const [secondsProgress, setSecondsProgress] = useState(0);\n  // useEffect(() => {\n  //   if (isKlockMode) {\n  //     const progressTimerId = setInterval(() => {\n  //       const currentSeconds = new Date().getSeconds();\n  //       setSecondsProgress((currentSeconds / 60) * 100);\n  //     }, 200); // Update progress more frequently for smoothness\n  //     return () => clearInterval(progressTimerId);\n  //   } else {\n  //     setSecondsProgress(0);\n  //   }\n  // }, [isKlockMode]);\n\n  const formatTime = date => {\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    if (isKlockMode) {\n      return `${hours}:${minutes}`;\n    }\n    const seconds = date.getSeconds().toString().padStart(2, '0');\n    return `${hours}:${minutes}:${seconds}`;\n  };\n  const handleMouseDown = e => {\n    var _clockRef$current$par;\n    if (!isDraggable || !clockRef.current) return;\n    setIsDragging(true);\n    // Get position in pixels, then convert to percentage for consistency if needed, or work in pixels\n    const rect = clockRef.current.getBoundingClientRect();\n    const parentRect = (_clockRef$current$par = clockRef.current.parentElement) === null || _clockRef$current$par === void 0 ? void 0 : _clockRef$current$par.getBoundingClientRect();\n    if (!parentRect) return;\n    dragStartRef.current = {\n      x: e.clientX,\n      y: e.clientY,\n      initialLeft: rect.left - parentRect.left,\n      initialTop: rect.top - parentRect.top\n    };\n    e.preventDefault(); // Prevent text selection\n  };\n  useEffect(() => {\n    const handleMouseMove = e => {\n      if (!isDragging || !dragStartRef.current || !clockRef.current) return;\n      const dx = e.clientX - dragStartRef.current.x;\n      const dy = e.clientY - dragStartRef.current.y;\n      let newLeftPx = dragStartRef.current.initialLeft + dx;\n      let newTopPx = dragStartRef.current.initialTop + dy;\n      const parentElement = clockRef.current.parentElement;\n      if (parentElement) {\n        const parentWidth = parentElement.clientWidth;\n        const parentHeight = parentElement.clientHeight;\n\n        // Convert to percentage for setPosition, as App.tsx stores it that way\n        const newLeftPercent = newLeftPx / parentWidth * 100;\n        const newTopPercent = newTopPx / parentHeight * 100;\n        setPosition({\n          left: `${newLeftPercent}%`,\n          top: `${newTopPercent}%`\n        });\n      }\n    };\n    const handleMouseUp = () => {\n      setIsDragging(false);\n      dragStartRef.current = null;\n    };\n    if (isDragging) {\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    }\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isDragging, setPosition]);\n  let cursorStyle = 'default';\n  if (isDraggable) {\n    cursorStyle = isDragging ? 'grabbing' : 'grab';\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: clockRef,\n    className: \"clock-container\",\n    style: {\n      top: position.top,\n      left: position.left,\n      transform: 'translate(-50%, -50%)',\n      // Center the clock on its top/left point\n      cursor: cursorStyle\n    },\n    onMouseDown: handleMouseDown,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clock-display\",\n      style: {\n        color: textColor,\n        fontFamily: fontFamily,\n        fontSize: textSize\n      },\n      children: formatTime(time)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(Clock, \"EOxM7ruG+Y94D6yAYZVb6QmM/Jg=\");\n_c = Clock;\nexport default Clock;\nvar _c;\n$RefreshReg$(_c, \"Clock\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Clock","textColor","fontFamily","textSize","isKlockMode","position","setPosition","isDraggable","_s","time","setTime","Date","isDragging","setIsDragging","dragStartRef","clockRef","timerId","setInterval","clearInterval","formatTime","date","hours","getHours","toString","padStart","minutes","getMinutes","seconds","getSeconds","handleMouseDown","e","_clockRef$current$par","current","rect","getBoundingClientRect","parentRect","parentElement","x","clientX","y","clientY","initialLeft","left","initialTop","top","preventDefault","handleMouseMove","dx","dy","newLeftPx","newTopPx","parentWidth","clientWidth","parentHeight","clientHeight","newLeftPercent","newTopPercent","handleMouseUp","window","addEventListener","removeEventListener","cursorStyle","ref","className","style","transform","cursor","onMouseDown","children","color","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Welloxy/CascadeProjects/windsurf-project/src/components/Clock/Clock.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Clock.css';\n\ninterface ClockProps {\n  textColor?: string;\n  fontFamily?: string;\n  textSize?: string;\n  isKlockMode?: boolean;\n  position: { top: string; left: string };\n  setPosition: (position: { top: string; left: string }) => void;\n  isDraggable?: boolean;\n}\n\nconst Clock: React.FC<ClockProps> = ({ \n  textColor, \n  fontFamily, \n  textSize, \n  isKlockMode, \n  position, \n  setPosition, \n  isDraggable \n}) => {\n  const [time, setTime] = useState(new Date());\n  const [isDragging, setIsDragging] = useState(false);\n  const dragStartRef = useRef<{ x: number; y: number; initialTop: number; initialLeft: number } | null>(null);\n  const clockRef = useRef<HTMLDivElement>(null);\n\n  // Timer for updating clock time display\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  // This useEffect for secondsProgress will be removed as progress bar moves to App.tsx\n  // const [secondsProgress, setSecondsProgress] = useState(0);\n  // useEffect(() => {\n  //   if (isKlockMode) {\n  //     const progressTimerId = setInterval(() => {\n  //       const currentSeconds = new Date().getSeconds();\n  //       setSecondsProgress((currentSeconds / 60) * 100);\n  //     }, 200); // Update progress more frequently for smoothness\n  //     return () => clearInterval(progressTimerId);\n  //   } else {\n  //     setSecondsProgress(0);\n  //   }\n  // }, [isKlockMode]);\n\n  const formatTime = (date: Date): string => {\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    if (isKlockMode) {\n      return `${hours}:${minutes}`;\n    }\n    const seconds = date.getSeconds().toString().padStart(2, '0');\n    return `${hours}:${minutes}:${seconds}`;\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!isDraggable || !clockRef.current) return;\n    setIsDragging(true);\n    // Get position in pixels, then convert to percentage for consistency if needed, or work in pixels\n    const rect = clockRef.current.getBoundingClientRect();\n    const parentRect = clockRef.current.parentElement?.getBoundingClientRect();\n\n    if (!parentRect) return;\n\n    dragStartRef.current = {\n      x: e.clientX,\n      y: e.clientY,\n      initialLeft: rect.left - parentRect.left,\n      initialTop: rect.top - parentRect.top,\n    };\n    e.preventDefault(); // Prevent text selection\n  };\n\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!isDragging || !dragStartRef.current || !clockRef.current) return;\n\n      const dx = e.clientX - dragStartRef.current.x;\n      const dy = e.clientY - dragStartRef.current.y;\n\n      let newLeftPx = dragStartRef.current.initialLeft + dx;\n      let newTopPx = dragStartRef.current.initialTop + dy;\n\n      const parentElement = clockRef.current.parentElement;\n      if (parentElement) {\n        const parentWidth = parentElement.clientWidth;\n        const parentHeight = parentElement.clientHeight;\n        \n        // Convert to percentage for setPosition, as App.tsx stores it that way\n        const newLeftPercent = (newLeftPx / parentWidth) * 100;\n        const newTopPercent = (newTopPx / parentHeight) * 100;\n\n        setPosition({ \n          left: `${newLeftPercent}%`, \n          top: `${newTopPercent}%` \n        });\n      }\n    };\n\n    const handleMouseUp = () => {\n      setIsDragging(false);\n      dragStartRef.current = null;\n    };\n\n    if (isDragging) {\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isDragging, setPosition]);\n\n  let cursorStyle = 'default';\n  if (isDraggable) {\n    cursorStyle = isDragging ? 'grabbing' : 'grab';\n  }\n\n  return (\n    <div \n      ref={clockRef}\n      className=\"clock-container\"\n      style={{\n        top: position.top,\n        left: position.left,\n        transform: 'translate(-50%, -50%)', // Center the clock on its top/left point\n        cursor: cursorStyle,\n      }}\n      onMouseDown={handleMouseDown}\n    >\n      <div className=\"clock-display\" style={{ color: textColor, fontFamily: fontFamily, fontSize: textSize }}>\n        {formatTime(time)}\n      </div>\n      {/* Progress bar has been moved to App.tsx */}\n    </div>\n  );\n};\n\nexport default Clock;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}