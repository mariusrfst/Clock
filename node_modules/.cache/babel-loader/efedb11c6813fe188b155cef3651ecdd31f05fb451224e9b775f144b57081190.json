{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Welloxy\\\\CascadeProjects\\\\windsurf-project\\\\src\\\\components\\\\Clock\\\\Clock.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Clock.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Clock = ({\n  textColor,\n  fontFamily,\n  textSize,\n  isKlockMode,\n  position,\n  setPosition,\n  isDraggable\n}) => {\n  _s();\n  const [time, setTime] = useState(new Date());\n  const [isDragging, setIsDragging] = useState(false);\n  const dragStartRef = useRef(null);\n  const clockRef = useRef(null);\n\n  // Timer for updating clock time display\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  // This useEffect for secondsProgress will be removed as progress bar moves to App.tsx\n  // const [secondsProgress, setSecondsProgress] = useState(0);\n  // useEffect(() => {\n  //   if (isKlockMode) {\n  //     const progressTimerId = setInterval(() => {\n  //       const currentSeconds = new Date().getSeconds();\n  //       setSecondsProgress((currentSeconds / 60) * 100);\n  //     }, 200); // Update progress more frequently for smoothness\n  //     return () => clearInterval(progressTimerId);\n  //   } else {\n  //     setSecondsProgress(0);\n  //   }\n  // }, [isKlockMode]);\n\n  const formatTime = date => {\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    if (isKlockMode) {\n      return `${hours}:${minutes}`;\n    }\n    const seconds = date.getSeconds().toString().padStart(2, '0');\n    return `${hours}:${minutes}:${seconds}`;\n  };\n  const handleMouseDown = e => {\n    if (!isDraggable || !clockRef.current) return;\n    setIsDragging(true);\n\n    // Parse current percentage positions. Remove '%' and convert to number.\n    const currentTopPercent = parseFloat(position.top);\n    const currentLeftPercent = parseFloat(position.left);\n    dragStartRef.current = {\n      mouseX: e.clientX,\n      mouseY: e.clientY,\n      initialClockTopPercent: currentTopPercent,\n      initialClockLeftPercent: currentLeftPercent\n    };\n    e.preventDefault(); // Prevent text selection\n  };\n  useEffect(() => {\n    const handleMouseMove = e => {\n      if (!isDragging || !dragStartRef.current || !clockRef.current) return;\n      const parentElement = clockRef.current.parentElement;\n      if (!parentElement) return;\n      const parentWidth = parentElement.clientWidth;\n      const parentHeight = parentElement.clientHeight;\n\n      // Calculate mouse movement in pixels\n      const dxPx = e.clientX - dragStartRef.current.mouseX;\n      const dyPx = e.clientY - dragStartRef.current.mouseY;\n\n      // Convert pixel movement to percentage movement\n      const dLeftPercent = dxPx / parentWidth * 100;\n      const dTopPercent = dyPx / parentHeight * 100;\n\n      // Calculate new percentage positions\n      let newLeftPercent = dragStartRef.current.initialClockLeftPercent + dLeftPercent;\n      let newTopPercent = dragStartRef.current.initialClockTopPercent + dTopPercent;\n\n      // Optional: Boundary checks (ensure clock center stays within viewport, can be refined)\n      // const clockWidthPercent = (clockRef.current.offsetWidth / parentWidth) * 100;\n      // const clockHeightPercent = (clockRef.current.offsetHeight / parentHeight) * 100;\n      // newLeftPercent = Math.max(clockWidthPercent / 2, Math.min(newLeftPercent, 100 - clockWidthPercent / 2));\n      // newTopPercent = Math.max(clockHeightPercent / 2, Math.min(newTopPercent, 100 - clockHeightPercent / 2));\n\n      setPosition({\n        left: `${newLeftPercent}%`,\n        top: `${newTopPercent}%`\n      });\n    };\n    const handleMouseUp = () => {\n      setIsDragging(false);\n      dragStartRef.current = null;\n    };\n    if (isDragging) {\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    }\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isDragging, setPosition]);\n  let cursorStyle = 'default';\n  if (isDraggable) {\n    cursorStyle = isDragging ? 'grabbing' : 'grab';\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: clockRef,\n    className: \"clock-container\",\n    style: {\n      top: position.top,\n      left: position.left,\n      transform: 'translate(-50%, -50%)',\n      // Center the clock on its top/left point\n      cursor: cursorStyle\n    },\n    onMouseDown: handleMouseDown,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clock-display\",\n      style: {\n        color: textColor,\n        fontFamily: fontFamily,\n        fontSize: textSize\n      },\n      children: formatTime(time)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(Clock, \"EOxM7ruG+Y94D6yAYZVb6QmM/Jg=\");\n_c = Clock;\nexport default Clock;\nvar _c;\n$RefreshReg$(_c, \"Clock\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Clock","textColor","fontFamily","textSize","isKlockMode","position","setPosition","isDraggable","_s","time","setTime","Date","isDragging","setIsDragging","dragStartRef","clockRef","timerId","setInterval","clearInterval","formatTime","date","hours","getHours","toString","padStart","minutes","getMinutes","seconds","getSeconds","handleMouseDown","e","current","currentTopPercent","parseFloat","top","currentLeftPercent","left","mouseX","clientX","mouseY","clientY","initialClockTopPercent","initialClockLeftPercent","preventDefault","handleMouseMove","parentElement","parentWidth","clientWidth","parentHeight","clientHeight","dxPx","dyPx","dLeftPercent","dTopPercent","newLeftPercent","newTopPercent","handleMouseUp","window","addEventListener","removeEventListener","cursorStyle","ref","className","style","transform","cursor","onMouseDown","children","color","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Welloxy/CascadeProjects/windsurf-project/src/components/Clock/Clock.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Clock.css';\n\ninterface ClockProps {\n  textColor?: string;\n  fontFamily?: string;\n  textSize?: string;\n  isKlockMode?: boolean;\n  position: { top: string; left: string };\n  setPosition: (position: { top: string; left: string }) => void;\n  isDraggable?: boolean;\n}\n\nconst Clock: React.FC<ClockProps> = ({ \n  textColor, \n  fontFamily, \n  textSize, \n  isKlockMode, \n  position, \n  setPosition, \n  isDraggable \n}) => {\n  const [time, setTime] = useState(new Date());\n  const [isDragging, setIsDragging] = useState(false);\n  const dragStartRef = useRef<{ mouseX: number; mouseY: number; initialClockTopPercent: number; initialClockLeftPercent: number } | null>(null);\n  const clockRef = useRef<HTMLDivElement>(null);\n\n  // Timer for updating clock time display\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  // This useEffect for secondsProgress will be removed as progress bar moves to App.tsx\n  // const [secondsProgress, setSecondsProgress] = useState(0);\n  // useEffect(() => {\n  //   if (isKlockMode) {\n  //     const progressTimerId = setInterval(() => {\n  //       const currentSeconds = new Date().getSeconds();\n  //       setSecondsProgress((currentSeconds / 60) * 100);\n  //     }, 200); // Update progress more frequently for smoothness\n  //     return () => clearInterval(progressTimerId);\n  //   } else {\n  //     setSecondsProgress(0);\n  //   }\n  // }, [isKlockMode]);\n\n  const formatTime = (date: Date): string => {\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    if (isKlockMode) {\n      return `${hours}:${minutes}`;\n    }\n    const seconds = date.getSeconds().toString().padStart(2, '0');\n    return `${hours}:${minutes}:${seconds}`;\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!isDraggable || !clockRef.current) return;\n    setIsDragging(true);\n\n    // Parse current percentage positions. Remove '%' and convert to number.\n    const currentTopPercent = parseFloat(position.top);\n    const currentLeftPercent = parseFloat(position.left);\n\n    dragStartRef.current = {\n      mouseX: e.clientX,\n      mouseY: e.clientY,\n      initialClockTopPercent: currentTopPercent,\n      initialClockLeftPercent: currentLeftPercent,\n    };\n    e.preventDefault(); // Prevent text selection\n  };\n\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!isDragging || !dragStartRef.current || !clockRef.current) return;\n\n      const parentElement = clockRef.current.parentElement;\n      if (!parentElement) return;\n\n      const parentWidth = parentElement.clientWidth;\n      const parentHeight = parentElement.clientHeight;\n\n      // Calculate mouse movement in pixels\n      const dxPx = e.clientX - dragStartRef.current.mouseX;\n      const dyPx = e.clientY - dragStartRef.current.mouseY;\n\n      // Convert pixel movement to percentage movement\n      const dLeftPercent = (dxPx / parentWidth) * 100;\n      const dTopPercent = (dyPx / parentHeight) * 100;\n\n      // Calculate new percentage positions\n      let newLeftPercent = dragStartRef.current.initialClockLeftPercent + dLeftPercent;\n      let newTopPercent = dragStartRef.current.initialClockTopPercent + dTopPercent;\n      \n      // Optional: Boundary checks (ensure clock center stays within viewport, can be refined)\n      // const clockWidthPercent = (clockRef.current.offsetWidth / parentWidth) * 100;\n      // const clockHeightPercent = (clockRef.current.offsetHeight / parentHeight) * 100;\n      // newLeftPercent = Math.max(clockWidthPercent / 2, Math.min(newLeftPercent, 100 - clockWidthPercent / 2));\n      // newTopPercent = Math.max(clockHeightPercent / 2, Math.min(newTopPercent, 100 - clockHeightPercent / 2));\n\n      setPosition({\n        left: `${newLeftPercent}%`,\n        top: `${newTopPercent}%`,\n      });\n    };\n\n    const handleMouseUp = () => {\n      setIsDragging(false);\n      dragStartRef.current = null;\n    };\n\n    if (isDragging) {\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isDragging, setPosition]);\n\n  let cursorStyle = 'default';\n  if (isDraggable) {\n    cursorStyle = isDragging ? 'grabbing' : 'grab';\n  }\n\n  return (\n    <div \n      ref={clockRef}\n      className=\"clock-container\"\n      style={{\n        top: position.top,\n        left: position.left,\n        transform: 'translate(-50%, -50%)', // Center the clock on its top/left point\n        cursor: cursorStyle,\n      }}\n      onMouseDown={handleMouseDown}\n    >\n      <div className=\"clock-display\" style={{ color: textColor, fontFamily: fontFamily, fontSize: textSize }}>\n        {formatTime(time)}\n      </div>\n      {/* Progress bar has been moved to App.tsx */}\n    </div>\n  );\n};\n\nexport default Clock;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}